// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: crud.sql

package sqlc

import (
	"context"
)

const deleteExample = `-- name: DeleteExample :one
DELETE FROM example_table
WHERE id = ?
RETURNING id, message, created_at, modified_at
`

// DeleteExample
//
//	DELETE FROM example_table
//	WHERE id = ?
//	RETURNING id, message, created_at, modified_at
func (q *Queries) DeleteExample(ctx context.Context, id int64) (ExampleTable, error) {
	row := q.queryRow(ctx, q.deleteExampleStmt, deleteExample, id)
	var i ExampleTable
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const insertExample = `-- name: InsertExample :one
INSERT INTO example_table (message)
VALUES (?)
RETURNING id, message, created_at, modified_at
`

// InsertExample
//
//	INSERT INTO example_table (message)
//	VALUES (?)
//	RETURNING id, message, created_at, modified_at
func (q *Queries) InsertExample(ctx context.Context, message string) (ExampleTable, error) {
	row := q.queryRow(ctx, q.insertExampleStmt, insertExample, message)
	var i ExampleTable
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listExamples = `-- name: ListExamples :many
SELECT id, message, created_at, modified_at FROM example_table ORDER BY id ASC
`

// ListExamples
//
//	SELECT id, message, created_at, modified_at FROM example_table ORDER BY id ASC
func (q *Queries) ListExamples(ctx context.Context) ([]ExampleTable, error) {
	rows, err := q.query(ctx, q.listExamplesStmt, listExamples)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleTable
	for rows.Next() {
		var i ExampleTable
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectByIdExample = `-- name: SelectByIdExample :one
SELECT id, message, created_at, modified_at FROM example_table WHERE id = ?
`

// SelectByIdExample
//
//	SELECT id, message, created_at, modified_at FROM example_table WHERE id = ?
func (q *Queries) SelectByIdExample(ctx context.Context, id int64) (ExampleTable, error) {
	row := q.queryRow(ctx, q.selectByIdExampleStmt, selectByIdExample, id)
	var i ExampleTable
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const updateExample = `-- name: UpdateExample :one
UPDATE example_table
SET 
    message = ?, 
    modified_at = CURRENT_TIMESTAMP
WHERE id = ?
RETURNING id, message, created_at, modified_at
`

type UpdateExampleParams struct {
	Message string `json:"message"`
	ID      int64  `json:"id"`
}

// UpdateExample
//
//	UPDATE example_table
//	SET
//	    message = ?,
//	    modified_at = CURRENT_TIMESTAMP
//	WHERE id = ?
//	RETURNING id, message, created_at, modified_at
func (q *Queries) UpdateExample(ctx context.Context, arg *UpdateExampleParams) (ExampleTable, error) {
	row := q.queryRow(ctx, q.updateExampleStmt, updateExample, arg.Message, arg.ID)
	var i ExampleTable
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const upsertExample = `-- name: UpsertExample :one
INSERT INTO example_table (id, message)
VALUES (?, ?)
ON CONFLICT (id) DO UPDATE SET
    message = EXCLUDED.message,
    modified_at = CURRENT_TIMESTAMP
RETURNING id, message, created_at, modified_at
`

type UpsertExampleParams struct {
	ID      int64  `json:"id"`
	Message string `json:"message"`
}

// UpsertExample
//
//	INSERT INTO example_table (id, message)
//	VALUES (?, ?)
//	ON CONFLICT (id) DO UPDATE SET
//	    message = EXCLUDED.message,
//	    modified_at = CURRENT_TIMESTAMP
//	RETURNING id, message, created_at, modified_at
func (q *Queries) UpsertExample(ctx context.Context, arg *UpsertExampleParams) (ExampleTable, error) {
	row := q.queryRow(ctx, q.upsertExampleStmt, upsertExample, arg.ID, arg.Message)
	var i ExampleTable
	err := row.Scan(
		&i.ID,
		&i.Message,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
