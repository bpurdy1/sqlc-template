// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package sqlc

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countBackliteTasksStmt, err = db.PrepareContext(ctx, countBackliteTasks); err != nil {
		return nil, fmt.Errorf("error preparing query CountBackliteTasks: %w", err)
	}
	if q.deleteExampleStmt, err = db.PrepareContext(ctx, deleteExample); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteExample: %w", err)
	}
	if q.examplesCursorPageStmt, err = db.PrepareContext(ctx, examplesCursorPage); err != nil {
		return nil, fmt.Errorf("error preparing query ExamplesCursorPage: %w", err)
	}
	if q.examplesOffsertPageStmt, err = db.PrepareContext(ctx, examplesOffsertPage); err != nil {
		return nil, fmt.Errorf("error preparing query ExamplesOffsertPage: %w", err)
	}
	if q.insertExampleStmt, err = db.PrepareContext(ctx, insertExample); err != nil {
		return nil, fmt.Errorf("error preparing query InsertExample: %w", err)
	}
	if q.listExamplesStmt, err = db.PrepareContext(ctx, listExamples); err != nil {
		return nil, fmt.Errorf("error preparing query ListExamples: %w", err)
	}
	if q.selectByIdExampleStmt, err = db.PrepareContext(ctx, selectByIdExample); err != nil {
		return nil, fmt.Errorf("error preparing query SelectByIdExample: %w", err)
	}
	if q.updateExampleStmt, err = db.PrepareContext(ctx, updateExample); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateExample: %w", err)
	}
	if q.upsertExampleStmt, err = db.PrepareContext(ctx, upsertExample); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertExample: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countBackliteTasksStmt != nil {
		if cerr := q.countBackliteTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBackliteTasksStmt: %w", cerr)
		}
	}
	if q.deleteExampleStmt != nil {
		if cerr := q.deleteExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteExampleStmt: %w", cerr)
		}
	}
	if q.examplesCursorPageStmt != nil {
		if cerr := q.examplesCursorPageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing examplesCursorPageStmt: %w", cerr)
		}
	}
	if q.examplesOffsertPageStmt != nil {
		if cerr := q.examplesOffsertPageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing examplesOffsertPageStmt: %w", cerr)
		}
	}
	if q.insertExampleStmt != nil {
		if cerr := q.insertExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertExampleStmt: %w", cerr)
		}
	}
	if q.listExamplesStmt != nil {
		if cerr := q.listExamplesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing listExamplesStmt: %w", cerr)
		}
	}
	if q.selectByIdExampleStmt != nil {
		if cerr := q.selectByIdExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectByIdExampleStmt: %w", cerr)
		}
	}
	if q.updateExampleStmt != nil {
		if cerr := q.updateExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateExampleStmt: %w", cerr)
		}
	}
	if q.upsertExampleStmt != nil {
		if cerr := q.upsertExampleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertExampleStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	countBackliteTasksStmt  *sql.Stmt
	deleteExampleStmt       *sql.Stmt
	examplesCursorPageStmt  *sql.Stmt
	examplesOffsertPageStmt *sql.Stmt
	insertExampleStmt       *sql.Stmt
	listExamplesStmt        *sql.Stmt
	selectByIdExampleStmt   *sql.Stmt
	updateExampleStmt       *sql.Stmt
	upsertExampleStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		countBackliteTasksStmt:  q.countBackliteTasksStmt,
		deleteExampleStmt:       q.deleteExampleStmt,
		examplesCursorPageStmt:  q.examplesCursorPageStmt,
		examplesOffsertPageStmt: q.examplesOffsertPageStmt,
		insertExampleStmt:       q.insertExampleStmt,
		listExamplesStmt:        q.listExamplesStmt,
		selectByIdExampleStmt:   q.selectByIdExampleStmt,
		updateExampleStmt:       q.updateExampleStmt,
		upsertExampleStmt:       q.upsertExampleStmt,
	}
}
