// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: paging.sql

package sqlc

import (
	"context"
)

const examplesCursorPage = `-- name: ExamplesCursorPage :many
SELECT id, message, created_at, modified_at
FROM example_table
WHERE id > ?
ORDER BY id ASC
LIMIT ?
`

type ExamplesCursorPageParams struct {
	ID    int64 `json:"id"`
	Limit int64 `json:"limit"`
}

// ExamplesCursorPage
//
//	SELECT id, message, created_at, modified_at
//	FROM example_table
//	WHERE id > ?
//	ORDER BY id ASC
//	LIMIT ?
func (q *Queries) ExamplesCursorPage(ctx context.Context, arg *ExamplesCursorPageParams) ([]ExampleTable, error) {
	rows, err := q.query(ctx, q.examplesCursorPageStmt, examplesCursorPage, arg.ID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleTable
	for rows.Next() {
		var i ExampleTable
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const examplesOffsertPage = `-- name: ExamplesOffsertPage :many
SELECT id, message, created_at, modified_at
FROM example_table
ORDER BY id ASC
LIMIT ?
OFFSET ?
`

type ExamplesOffsertPageParams struct {
	Limit  int64 `json:"limit"`
	Offset int64 `json:"offset"`
}

// ExamplesOffsertPage
//
//	SELECT id, message, created_at, modified_at
//	FROM example_table
//	ORDER BY id ASC
//	LIMIT ?
//	OFFSET ?
func (q *Queries) ExamplesOffsertPage(ctx context.Context, arg *ExamplesOffsertPageParams) ([]ExampleTable, error) {
	rows, err := q.query(ctx, q.examplesOffsertPageStmt, examplesOffsertPage, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExampleTable
	for rows.Next() {
		var i ExampleTable
		if err := rows.Scan(
			&i.ID,
			&i.Message,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
